#!/bin/bash
VERSION="1.0.0"

#0######################### Concurrency Count ###########################
#
# DISCLAIMER:
# This bash script was first published for PBXact and FreePBX on 1st July
# 2025. Contents are provided as-is without warranty of any kind, express
# or implied. You may modify, distribute, and use this script; 20tele.com
# accepts no responsibility for any damage or issues arising from its use.
#
# PURPOSE:
# This simple tool can calculate total concurrent calls per SIP trunk or
# extension within a specified date range for FreePBX or PBXact systems.
# Group mode counts every call for all extensions, excluding SIP trunks.
#
# ${RED}WARNING:${NC}
# Please test it thoroughly in a controlled environment before deploying.
#
# VERSION:
# ${VERSION}
#
# PUBLISHED:
# 1st July 2025
#
# LICENSE:
# GNU General Public License v3.0
#
#1######################## COLOUR DEFINITIONS ###########################

LBLUE='\033[1;94m'; RED='\033[0;31m'; ORANGE='\033[38;5;208m'; YELLOW='\033[0;33m'; GREEN='\033[0;32m'; NC='\033[0m'

#2########################## USAGE & HELP ###############################

usage() {
  echo
  echo -e "${LBLUE}Usage:${NC} $(basename "$0") ${GREEN}[flags]${NC}"
  echo
  echo "Options:"
  echo -e "  ${GREEN}-d${NC}, ${GREEN}--debug${NC}       Enable verbose debug logging"
  echo -e "  ${GREEN}-s${NC}, ${GREEN}--status${NC}      Show script version & status, then exit"
  echo -e "  ${GREEN}-h${NC}, ${GREEN}--help${NC}        Show this help message and exit"
  echo -e "  ${GREEN}-t${NC}, ${GREEN}--trunks${NC}      Jump straight to trunk mode"
  echo -e "  ${GREEN}-e${NC}, ${GREEN}--extensions${NC}  Jump straight to extension mode"
  echo -e "  ${GREEN}-g${NC}, ${GREEN}--group${NC}       Jump straight to group mode"
  echo
  echo "After flags, you will be prompted to select:"
  echo "  - Date range (month or custom start/end)"
  echo
  echo "Examples:"
  echo "  $(basename "$0")"
  echo "  $(basename "$0") --debug"
  echo "  $(basename "$0") --status"
  echo "  $(basename "$0") --group"
  echo "  $(basename "$0") --extensions --debug"
  echo "  $(basename "$0") --debug --extensions"
  echo
      echo -e "${LBLUE}Goodbye.${NC}"
echo
  exit 0
}

#3######################### VARIABLES & FLAGS ###########################

DEBUG_MODE=0
MODE_PRESET=0
mode_input=""

#4######################### ARGUMENT PARSING ############################

while [[ $# -gt 0 ]]; do
  case "$1" in
    -d|--debug)
      DEBUG_MODE=1
      ;;
    -s|--status)
      echo
      echo -e "${LBLUE}Concurrency Count Status${NC}"
      echo
      echo "Script version: ${VERSION}"
      echo "Debug mode: $DEBUG_MODE"
      echo
      echo -e "${LBLUE}Goodbye.${NC}"
      echo
      exit 0
      ;;
    -h|--help)
      usage
      ;;
    -t|--trunks)
      MODE_PRESET=1
      mode_input="trunk"
      ;;
    -e|--extensions)
      MODE_PRESET=1
      mode_input="extension"
      ;;
    -g|--group)
      MODE_PRESET=1
      mode_input="group"
      ;;
    *)
      echo
      echo -e "${ORANGE}That flag is unsupported:${NC} $1. ${LBLUE}Goodbye.${NC}"
      echo
      exit 1
      ;;
  esac
  shift
done

if (( $# > 0 )); then
echo
  echo -e "${ORANGE}That flag is unsupported.${NC} ${LBLUE}Goodbye.${NC}"
echo
  exit 1
fi

#5########################## TRAPS & DEBUG #############################

trap 'echo; echo -e "${ORANGE}\nSession aborted.${NC} ${LBLUE}Goodbye.\n${NC}"; exit 130' INT

debug() {
  if (( DEBUG_MODE )); then
    echo "DEBUG: $*"
  fi
}

#6########################### INTRO MESSAGE ############################

echo
echo -e "${LBLUE}Hello. Thanks for using Concurrency Count ${VERSION} by 20tele.com${NC}"
echo
echo "This simple tool counts maximum concurrent calls per trunk, extension,"
echo "or group, within a specified date range for FreePBX or PBXact systems."
echo "Compatible solely with the PJSIP channel driver (no chan_sip support)."
echo "Press Ctrl+C to immediately abort Concurrency Count ${VERSION} at any time."
if (( DEBUG_MODE )); then
    echo -e "${YELLOW}DEBUG MODE ENABLED${NC}"
    echo
fi

#7###################### DATABASE CONFIGURATION #########################

MYSQL_CREDENTIALS="--defaults-extra-file=/root/.my.cnf -D asteriskcdrdb"

#8######################### DATE RANGE LOGIC ############################

validate_partial_date() {
  local date_str="$1"

  if [[ "$date_str" =~ ^([0-9]{4})(-([0-9]{1,2})(-([0-9]{1,2}))?)?( ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}))?$ ]]; then
    local y="${BASH_REMATCH[1]}"
    local m="${BASH_REMATCH[3]}"
    local d="${BASH_REMATCH[5]}"
    local H="${BASH_REMATCH[7]}"
    local M="${BASH_REMATCH[8]}"
    local S="${BASH_REMATCH[9]}"

    if (( y < 2000 || y > 2099 )); then
      return 1
    fi

    if [[ -n "$m" ]]; then
      if (( m < 1 || m > 12 )); then
        return 1
      fi
    else
      return 0
    fi

    if [[ -n "$d" ]]; then
      local max_day
      max_day=$(date -d "$y-$m-01 +1 month -1 day" '+%d')
      if (( d < 1 || d > 10#$max_day )); then
        return 1
      fi
    else
      return 0
    fi

    if [[ -n "$H" && -n "$M" && -n "$S" ]]; then
      if (( H < 0 || H > 23 )); then
        return 1
      fi
      if (( M < 0 || M > 59 )); then
        return 1
      fi
      if (( S < 0 || S > 59 )); then
        return 1
      fi
    elif [[ -n "$H" || -n "$M" || -n "$S" ]]; then
      return 1
    fi

  else
    return 1
  fi

  return 0
}

normalize_year() {
  local input="$1"

  if [[ "$input" =~ ^[0-9]{1,4}$ ]]; then
    echo "$input"
    return
  fi

  if [[ "$input" =~ ^([0-9]{1,2})(-([0-9]{1,2})(-([0-9]{1,2}))?)?(.*)$ ]]; then
    local y="${BASH_REMATCH[1]}"
    local m="${BASH_REMATCH[3]}"
    local d="${BASH_REMATCH[5]}"
    local rest="${BASH_REMATCH[6]}"

    if (( y < 100 )); then
      y=$((2000 + 10#$y))
    fi

    if [[ -n "$m" ]]; then
      m=$(printf "%02d" "$m")
    else
      m="01"
    fi

    if [[ -n "$d" ]]; then
      d=$(printf "%02d" "$d")
    else
      d="01"
    fi

    input="${y}-${m}-${d}${rest}"
    echo "$input"
    return
  fi

  echo "$input"
}

get_date_range() {
  local month month_num month_name year full_year year_int current_year
  current_year=$(date +%Y)
  local attempts

  attempts=0
  while :; do
    ((attempts++))
    read -rp $'\nType a month, [today/yesterday], or leave blank and Enter for a custom date range: ' month
    [[ -z "$month" ]] && break

    month_lc="${month,,}"
    
    if [[ "$month" =~ ^[0-9]{3,}$ ]]; then
      echo
      echo -e "${RED}WARNING:${NC} Invalid month entered (attempt $attempts of 3)."
      if (( attempts == 3 )); then
        echo
        echo -e "${ORANGE}Too many invalid month attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi
      continue
    fi

    if [[ "$month_lc" =~ ^[0-9]{4}-$ ]]; then
      echo
      echo -e "${RED}WARNING:${NC} Invalid month entered (attempt $attempts of 3)."
      if (( attempts == 3 )); then
        echo
        echo -e "${ORANGE}Too many invalid month attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi
      continue
    fi

    if [[ "$month_lc" =~ ^(y|ye|yes|yest|yeste|yester|yesterd|yesterda|yesterday)$ ]]; then
      start_date="$(date -d 'yesterday' '+%Y-%m-%d 00:00:00')"
      end_date="$(date -d 'yesterday' '+%Y-%m-%d 23:59:59')"
      return
    fi

    if [[ "$month_lc" =~ ^(t|to|tod|toda|today)$ ]]; then
      start_date="$(date '+%Y-%m-%d 00:00:00')"
      end_date="$(date '+%Y-%m-%d %H:%M:%S')"
      return
    fi
    if [[ "$month_lc" =~ ^(now|sec|secs|second|seconds|sec|min|mins|minute|minutes|hour|hours|day|days|week|weeks|fortnight|fortnights|month|months|year|years|tomorrow)$ ]]; then
      echo
      echo -e "${RED}WARNING:${NC} Invalid month entered (attempt $attempts of 3)."
      if (( attempts == 3 )); then
        echo
        echo -e "${ORANGE}Too many invalid month attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi

      continue
    fi
    if [[ "$month" =~ ^[0-9]{1,2}$ ]] && (( month >= 1 && month <= 12 )); then
      month_num=$(printf "%02d" "$month")
      month_name=$(date -d "${month_num}/01" +%B)
      break
    fi

    if month_num=$(date -d "${month} 1" +%m 2>/dev/null); then
      month_name=$(date -d "${month} 1" +%B)
      break
    fi

    if (( attempts == 3 )); then
      echo
      echo -e "${ORANGE}Too many invalid month attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
      exit 1
    fi

    echo
    echo -e "${RED}WARNING:${NC} Invalid month entered (attempt $attempts of 3)."
  done

  if [[ -n "${month_num-}" ]]; then
    attempts=0
    while (( attempts < 3 )); do
      ((attempts++))
      echo
      read -rp "Type year for ${month_name} (YYYY, YY or Y): " year

      if [[ "$year" =~ ^[0-9]$ ]]; then
        full_year="200$year"
      elif [[ "$year" =~ ^[0-9]{2}$ ]]; then
        full_year="20$year"
        year_int=$((10#$full_year))
        if (( year_int > current_year )); then
          echo
          echo -e "${RED}WARNING:${NC} Year out of allowed range (attempt $attempts of 3)."
          continue
        fi
      elif [[ "$year" =~ ^[0-9]{4}$ ]]; then
        full_year="$year"
      else
        echo
        echo -e "${RED}WARNING:${NC} Invalid year entered (attempt $attempts of 3)."
        continue
      fi

      year_int=$((10#$full_year))
      
      if (( year_int >= 2000 && year_int <= current_year )); then
        current_month=$(date +%m)
        current_day=$(date +%d)
        current_year_now=$(date +%Y)

        if [[ "$month_num" == "$current_month" && "$year_int" == "$current_year_now" ]]; then
          start_date=$(date -d "${year_int}-${month_num}-01" '+%Y-%m-%d 00:00:00')
          end_date=$(date '+%Y-%m-%d %H:%M:%S')
        else
          start_date=$(date -d "${year_int}-${month_num}-01" '+%Y-%m-%d 00:00:00')
          end_date=$(date -d "${year_int}-${month_num}-01 +1 month -1 day" '+%Y-%m-%d 23:59:59')
        fi
        return
      fi
      echo
      echo -e "${RED}WARNING:${NC} Year out of allowed range (attempt $attempts of 3)."
    done
    echo
    echo -e "${ORANGE}Too many invalid year attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
    echo
    exit 1
  fi
echo
  echo "You chose a custom date range."

  attempts=0
  while true; do
    ((attempts++))
    echo
    read -rp "Enter start date/time (YYYY-MM-DD HH:MM:SS, YYYY-MM-DD, YYYY-MM, YYYY, YY or Y): " start_date
            if [[ -n "$start_date" && ! "$start_date" =~ ^([0-9]{1,2}|[0-9]{4}|[0-9]{4}-[0-9]{2}|[0-9]{4}-[0-9]{2}-[0-9]{2})( [0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2})?$ ]]; then
      echo
      echo -e "${RED}WARNING:${NC} Invalid date format entered (attempt $attempts of 3)."
      if (( attempts >= 3 )); then
      echo
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        exit 1
      fi
      continue
    fi
if [[ "$start_date" =~ ^([0-9]{1,2})(-([0-9]{1,2}))?(-([0-9]{1,2}))?( ([0-9]{1,2})(:([0-9]{1,2}))?(:([0-9]{1,2}))?)?$ ]]; then
  local y="${BASH_REMATCH[1]}" m="${BASH_REMATCH[3]}" d="${BASH_REMATCH[5]}"
  local H="${BASH_REMATCH[7]}" M="${BASH_REMATCH[9]}" S="${BASH_REMATCH[11]}"
  y=$((10#$y)); (( y < 100 )) && y=$((2000 + y))
  m=$(printf "%02d" "${m:-1}")   d=$(printf "%02d" "${d:-1}")
  H=$(printf "%02d" "${H:-0}")   M=$(printf "%02d" "${M:-0}")   S=$(printf "%02d" "${S:-0}")
  start_date="$y-$m-$d $H:$M:$S"
fi

    if [[ -z "$start_date" ]]; then
      start_date="2000-01-01 00:00:00"
      break
    fi

    if ! validate_partial_date "$start_date"; then
      echo
      echo -e "${RED}WARNING:${NC} Invalid start date entered (attempt $attempts of 3)."
      if (( attempts >= 3 )); then
        echo
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi
      continue
    fi

    if [[ "$start_date" =~ ^(t|to|tod|toda|today|y|ye|yes|yest|yeste|yester|yesterd|yesterda|yesterday)$ ]]; then
      echo
      echo -e "${RED}WARNING:${NC} Invalid start date entered (attempt $attempts of 3)."
      if (( attempts >= 3 )); then
        echo
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi
      continue
    fi

    if [[ "$start_date" =~ ^[0-9]{3}$ ]]; then
      echo -e "${RED}WARNING:${NC} Invalid shorthand year entered (attempt $attempts of 3)."
      if (( attempts >= 3 )); then
        echo
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi
      continue
    fi

    if [[ "$start_date" =~ ^[0-9]$ ]]; then
      full_year="200$start_date"
      start_date="${full_year}-01-01 00:00:00"
      break
    elif [[ "$start_date" =~ ^[0-9]{2}$ ]]; then
      full_year="20$start_date"
      year_int=$((10#$full_year))
      if (( year_int <= current_year )); then
        start_date="${full_year}-01-01 00:00:00"
        break
      else
        echo -e "${RED}WARNING:${NC} Year out of allowed range (attempt $attempts of 3)."
        if (( attempts >= 3 )); then
          echo
          echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
          echo
          exit 1
        fi
        continue
      fi
    elif [[ "$start_date" =~ ^[0-9]{4}$ ]]; then
      year_int=$((10#$start_date))
      if (( year_int >= 2000 && year_int <= current_year )); then
        start_date="${year_int}-01-01 00:00:00"
        break
      else
        echo -e "${RED}WARNING:${NC} Year out of allowed range (attempt $attempts of 3)."
        if (( attempts >= 3 )); then
          echo
          echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
          echo
          exit 1
        fi
        continue
      fi
    elif [[ "$start_date" =~ ^[0-9]{4}-[0-9]{2}$ ]]; then
      start_date="${start_date}-01 00:00:00"
      break
    elif date -d "$start_date" &>/dev/null; then
      start_date=$(date -d "$start_date" '+%Y-%m-%d %H:%M:%S')
      start_epoch=$(date -d "$start_date" +%s)
      now_epoch=$(date +%s)
      if (( start_epoch > now_epoch )); then
        echo
        echo -e "${RED}WARNING:${NC} Start date is in the future (attempt $attempts of 3)."
        if (( attempts >= 3 )); then
          echo
          echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
          echo
          exit 1
        fi
        continue
      fi
      break
    else
      echo
      echo -e "${RED}WARNING:${NC} Invalid start date entered (attempt $attempts of 3)."
      if (( attempts >= 3 )); then
        echo
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi
    fi
  done
  echo

  attempts=0
  while true; do
    ((attempts++))
    read -rp "Enter end date/time (YYYY-MM-DD HH:MM:SS, YYYY-MM-DD, YYYY-MM, YYYY, YY or Y): " end_date
    if [[ -n "$end_date" && ! "$end_date" =~ ^([0-9]{1,2}|[0-9]{4}|[0-9]{4}-[0-9]{2}|[0-9]{4}-[0-9]{2}-[0-9]{2})( [0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2})?$ ]]; then
      echo
      echo -e "${RED}WARNING:${NC} Invalid date format entered (attempt $attempts of 3)."
      echo
      if (( attempts >= 3 )); then
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        exit 1
      fi
      continue
    fi

if [[ "$end_date" =~ ^[0-9]{1,2}$ ]]; then
  full_year=$((2000 + 10#$end_date))
  if (( full_year == current_year )); then
    end_date="$(date '+%Y-%m-%d %H:%M:%S')"
  else
    end_date="${full_year}-12-31 23:59:59"
  fi
  break
fi

    if [[ "$end_date" =~ ^([0-9]{1,2})(-([0-9]{1,2}))?(-([0-9]{1,2}))?( ([0-9]{1,2})(:([0-9]{1,2}))?(:([0-9]{1,2}))?)?$ ]]; then
      local y="${BASH_REMATCH[1]}" m="${BASH_REMATCH[3]}" d="${BASH_REMATCH[5]}"
      local H="${BASH_REMATCH[7]}" M="${BASH_REMATCH[9]}" S="${BASH_REMATCH[11]}"
      y=$((10#$y)); (( y < 100 )) && y=$((2000 + y))
      m=$(printf "%02d" "${m:-12}")
      if [[ -z "$d" ]]; then
        d=$(date -d "$y-$m-01 +1 month -1 day" '+%d')
      fi
      d=$(printf "%02d" "$d")
      H="23"; M="59"; S="59"
      end_date="$y-$m-$d $H:$M:$S"
    fi

    if [[ -z "$end_date" ]]; then
      end_date="$(date '+%Y-%m-%d %H:%M:%S')"
      break
    fi

    if ! validate_partial_date "$end_date"; then
      echo
      echo -e "${RED}WARNING:${NC} Invalid end date entered (attempt $attempts of 3)."
      echo
      if (( attempts >= 3 )); then
        echo
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        exit 1
      fi
      continue
    fi

    if [[ "$end_date" =~ ^(t|to|tod|toda|today|y|ye|yes|yest|yeste|yester|yesterd|yesterda|yesterday)$ ]]; then
      echo
      echo -e "${RED}WARNING:${NC} Invalid end date entered (attempt $attempts of 3)."
      echo
      if (( attempts >= 3 )); then
        echo
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        exit 1
      fi
      continue
    fi

    if [[ "$end_date" =~ ^[0-9]{3}$ ]]; then
      echo -e "${RED}WARNING:${NC} Invalid shorthand year entered (attempt $attempts of 3)."
      if (( attempts >= 3 )); then
        echo
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi
      continue
    fi

    if [[ "$end_date" =~ ^[0-9]$ ]]; then
      full_year="200$end_date"
      year_int=$((10#$full_year))
      if [[ "$year_int" == "$(date +%Y)" ]]; then
        end_date="$(date '+%Y-%m-%d %H:%M:%S')"
      else
        end_date="${full_year}-12-31 23:59:59"
      fi
    elif [[ "$end_date" =~ ^[0-9]{2}$ ]]; then
      full_year="20$end_date"
      year_int=$((10#$full_year))
      if (( year_int <= current_year )); then
        if [[ "$year_int" == "$(date +%Y)" ]]; then
          end_date="$(date '+%Y-%m-%d %H:%M:%S')"
        else
          end_date="${full_year}-12-31 23:59:59"
        fi
      else
        echo
        echo -e "${RED}WARNING:${NC} Year out of allowed range (attempt $attempts of 3)."
        if (( attempts >= 3 )); then
          echo
          echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
          echo
          exit 1
        fi
        continue
      fi
    elif [[ "$end_date" =~ ^[0-9]{4}$ ]]; then
      year_int=$((10#$end_date))
      if (( year_int >= 2000 && year_int <= current_year )); then
        if [[ "$year_int" == "$(date +%Y)" ]]; then
          end_date="$(date '+%Y-%m-%d %H:%M:%S')"
        else
          end_date="${year_int}-12-31 23:59:59"
        fi
      else
        echo
        echo -e "${RED}WARNING:${NC} Year out of allowed range (attempt $attempts of 3)."
        if (( attempts >= 3 )); then
          echo
          echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
          echo
          exit 1
        fi
        continue
      fi
    elif [[ "$end_date" =~ ^[0-9]{4}-[0-9]{2}$ ]]; then
      month_num=$(date -d "${end_date}-01" +%m)
      year_int=$(date -d "${end_date}-01" +%Y)
      current_month=$(date +%m)
      current_year_now=$(date +%Y)
      if [[ "$month_num" == "$current_month" && "$year_int" == "$current_year_now" ]]; then
        end_date=$(date '+%Y-%m-%d %H:%M:%S')
      else
        end_date=$(date -d "${end_date}-01 +1 month -1 day" '+%Y-%m-%d 23:59:59')
      fi
    elif date -d "$end_date" &>/dev/null; then
      parsed_date=$(date -d "$end_date" '+%Y-%m-%d')
      today_date=$(date '+%Y-%m-%d')
      if [[ "$parsed_date" == "$today_date" ]]; then
        end_date=$(date '+%Y-%m-%d %H:%M:%S')
      else
        end_date=$(date -d "$end_date" '+%Y-%m-%d %H:%M:%S')
      fi
    else
      echo
      echo -e "${RED}WARNING:${NC} Invalid end date entered (attempt $attempts of 3)."
      echo
      if (( attempts >= 3 )); then
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi
      continue
    fi

    start_epoch=$(date -d "$start_date" +%s)
    end_epoch=$(date -d "$end_date" +%s)
    now_epoch=$(date +%s)

if (( end_epoch > now_epoch + 1 )); then
      echo
      echo -e "${RED}WARNING:${NC} End date is in the future (attempt $attempts of 3)."
      echo
      if (( attempts >= 3 )); then
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi
      continue
    fi

    if (( end_epoch <= start_epoch )); then
      echo
      echo -e "${RED}WARNING:${NC} End date entered is before start date."
      echo
      if (( attempts >= 3 )); then
        echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.\n${NC}"
        echo
        exit 1
      fi
      continue
    fi

    break
  done
}


#9######################### GROUP MODE LOGIC ############################

calculate_group_concurrency() {
    exec 3<&0
    did_prompt=0
    echo -e "Counting overall concurrent calls (calculating every numeric leg) from $start_date to $end_date..."
        echo
    calls=$(mysql $MYSQL_CREDENTIALS -Bse "
        SELECT calldate, duration, channel, dstchannel
        FROM cdr
        WHERE disposition = 'ANSWERED'
          AND calldate BETWEEN '$start_date' AND '$end_date'
          AND (channel LIKE 'PJSIP/%' OR dstchannel LIKE 'PJSIP/%');
    ")
    total_rows=$(wc -l <<<"$calls")
    row=0
    processed=0
    START_TIME=$(date +%s)
    LAST_WARNING=$START_TIME
    MAX_RUNTIME=3600
    LAST_STATUS=$START_TIME
    LAST_DEBUG=$START_TIME

    declare -A per_second_count

    while IFS=$'\t' read -r calldate duration chan dstchan; do
        (( row++, processed++ ))
        CURRENT_TIME=$(date +%s)

if (( CURRENT_TIME - LAST_STATUS >= 1 )); then
    printf "\r%${COLUMNS}s" " "
    printf "\r${YELLOW}Still counting:${NC} Currently at row %d of %d..." \
           "$row" "$total_rows" >&2
    LAST_STATUS=$CURRENT_TIME
fi
        elapsed=$(( CURRENT_TIME - START_TIME ))
        est_remain=$(awk "BEGIN {printf \"%d\", ($elapsed/$processed)*($total_rows-$processed) + 0.5}")
        mins=$((est_remain/60)); secs=$((est_remain%60))
        est_human="${mins} minutes ${secs} seconds"

        max_left=$(( MAX_RUNTIME - elapsed ))
        [[ max_left -lt 0 ]] && max_left=0
        max_mins=$((max_left/60)); max_secs=$((max_left%60))
        max_human="${max_mins} minutes ${max_secs} seconds"

        if (( CURRENT_TIME - LAST_DEBUG >= 10 )); then
            debug "elapsed=$elapsed processed=$processed total_rows=$total_rows est_remain=$est_remain max_left=$max_left"
            LAST_DEBUG=$CURRENT_TIME
        fi

        if (( did_prompt == 0 )) && \
           (( elapsed + est_remain > MAX_RUNTIME )) && \
           (( CURRENT_TIME - LAST_WARNING >= 900 )) && \
           (( LAST_WARNING + 900 < START_TIME + MAX_RUNTIME )); then

            t0=$SECONDS
            echo
            echo
read -u 3 -rp "$(printf '%b' "${RED}WARNING:${NC} There is a lot to count and the estimated time remaining is ${est_human}. Maximum runtime remaining is ${max_human}, which means the count is likely to abort before completion. Continue anyway? [y/N] ")" answer
            t1=$SECONDS
            START_TIME=$(( START_TIME + (t1 - t0) ))

            case "${answer,,}" in
                y|yes)
                    LAST_WARNING=$CURRENT_TIME
                    did_prompt=1
                    ;;
                *)
                    echo
                    echo -e "${ORANGE}Aborting as per user request.${NC} ${LBLUE}Goodbye.\n${NC}"
                    exit 130
                    ;;
            esac
        fi

        if (( CURRENT_TIME - START_TIME > MAX_RUNTIME )); then
            echo "Error: Script exceeded the maximum runtime of $MAX_RUNTIME seconds in group mode."
            echo
            echo -e "${ORANGE}Aborting script to protect system stability.${NC} ${LBLUE}Goodbye.\n${NC}"
            echo
            exit 2
        fi

        [[ -z "$calldate" || -z "$duration" ]] && continue

        start_ts=$(date -d "$calldate" +%s)
        end_ts=$((start_ts + duration))
        if (( end_ts - start_ts > 86400 )); then
            debug "Clamping call at $calldate to max 24h."
            end_ts=$(( start_ts + 86400 ))
        fi

        if [[ "$chan" =~ ^PJSIP/([0-9]+)- ]]; then
            ext1="${BASH_REMATCH[1]}"
        else
            ext1=""
        fi
        if [[ "$dstchan" =~ ^PJSIP/([0-9]+)- ]]; then
            ext2="${BASH_REMATCH[1]}"
        else
            ext2=""
        fi

        for (( ts = start_ts; ts <= end_ts; ts++ )); do
            [[ -n "$ext1" ]] && per_second_count["$ts"]=$(( per_second_count["$ts"] + 1 ))
            [[ -n "$ext2" ]] && per_second_count["$ts"]=$(( per_second_count["$ts"] + 1 ))
        done
    done <<< "$calls"

    max_concurrency=0
    max_times=()
    for ts in "${!per_second_count[@]}"; do
        count=${per_second_count[$ts]}
        if (( count > max_concurrency )); then
            max_concurrency=$count
            max_times=($ts)
        elif (( count == max_concurrency )); then
            max_times+=($ts)
        fi
    done

    if (( max_concurrency > 0 )); then
        echo
        echo
        echo "Peaks occurred at the following time ranges:"
        echo
        IFS=$'\n' sorted=( $(sort -n <<<"${max_times[*]}") ); unset IFS
        range_start=${sorted[0]}; prev=$range_start
        for (( i=1; i<${#sorted[@]}; i++ )); do
            current=${sorted[i]}
            if (( current != prev + 1 )); then
                if (( range_start == prev )); then
                    printf "  %s\n" "$(date -d "@$range_start" '+%Y-%m-%d %H:%M:%S')"
                else
                    printf "  %s to %s\n" \
                        "$(date -d "@$range_start" '+%Y-%m-%d %H:%M:%S')" \
                        "$(date -d "@$prev"       '+%Y-%m-%d %H:%M:%S')"
                fi
                range_start=$current
            fi
            prev=$current
        done
        if (( range_start == prev )); then
            printf "  %s\n" "$(date -d "@$range_start" '+%Y-%m-%d %H:%M:%S')"
        else
            printf "  %s to %s\n" \
                "$(date -d "@$range_start" '+%Y-%m-%d %H:%M:%S')" \
                "$(date -d "@$prev"       '+%Y-%m-%d %H:%M:%S')"
        fi
        echo
        echo -e "${LBLUE}Maximum concurrent calls overall: $max_concurrency${NC}"
    else
        echo -e "${ORANGE}No calls found${NC} in the selected date range."
    fi
echo
    echo -e "${RED}WARNING:${NC} If your SIP trunks are named using numeric values e.g. 24700020,"
    echo "the Concurrency Count results may be inaccurate because the script counts"
    echo "concurrent calls by extension number. Trunks named numerically will be"
    echo "counted as extensions, leading to unexpected concurrency figures."
    echo "For accurate results, trunk names should include alphabetic characters."
}

#10######################### TRUNK RETRIEVAL ############################

get_trunks() {
    asterisk -rx "pjsip show endpoints" 2>/dev/null |
        awk '/^[[:space:]]*Endpoint:/ {print $2}' |
        grep -v '^<Endpoint' |
        cut -d/ -f1 |
        sed 's/^[[:space:]]*//;s/[[:space:]]*$//' |
        grep -vE '^[0-9]+$' |
        sort -u
}

#11######################## CONCURRENCY LOGIC ###########################

calculate_concurrency() {
    local mode="$1"
    local type_label

    exec 3<&0
    did_prompt=0

if [[ "$mode" == "extension" ]]; then
    type_label="extension"
else
    type_label="trunk"
fi
    echo -e "Counting PJSIP ${type_label} call data from $start_date to $end_date..."
if [[ "$mode" == "extension" ]]; then
  echo

fi
    if [[ "$mode" == "trunk" ]]; then
        trunks=( $(get_trunks) )
        debug "Trunks detected in system:"
        echo
        for t in "${trunks[@]}"; do debug "  $t"; done

        trunk_sql_condition="("
        for trunk in "${trunks[@]}"; do
            trunk_sql_condition+="channel LIKE 'PJSIP/${trunk}%' OR dstchannel LIKE 'PJSIP/${trunk}%' OR "
        done
        trunk_sql_condition="${trunk_sql_condition% OR } )"

        calls=$(mysql $MYSQL_CREDENTIALS -Bse "
            SELECT calldate, duration, channel AS chan
            FROM cdr
            WHERE disposition='ANSWERED'
              AND calldate BETWEEN '$start_date' AND '$end_date'
              AND (
                  $trunk_sql_condition
                  OR (CHAR_LENGTH(dst)>6 AND dst NOT REGEXP '^[19]')
              )
            UNION ALL
            SELECT calldate, duration, dstchannel AS chan
            FROM cdr
            WHERE disposition='ANSWERED'
              AND calldate BETWEEN '$start_date' AND '$end_date'
              AND (
                  $trunk_sql_condition
                  OR (CHAR_LENGTH(dst)>6 AND dst NOT REGEXP '^[19]')
              );"
        )
    else
        calls=$(mysql $MYSQL_CREDENTIALS -Bse "
            SELECT calldate, duration,
                   CASE
                     WHEN dstchannel REGEXP '^PJSIP/[0-9]+-' THEN dstchannel
                     WHEN channel  REGEXP '^PJSIP/[0-9]+-' THEN channel
                     ELSE ''
                   END AS chan
            FROM cdr
            WHERE disposition='ANSWERED'
              AND calldate BETWEEN '$start_date' AND '$end_date'
              AND (channel LIKE 'PJSIP/%' OR dstchannel LIKE 'PJSIP/%')
              AND dst NOT REGEXP '^[19]';"
        )
    fi

    total_rows=$(wc -l <<<"$calls")
    row=0; processed=0
    START_TIME=$(date +%s)
    LAST_WARNING=$START_TIME
    MAX_RUNTIME=3600
    LAST_STATUS=$START_TIME
    LAST_DEBUG=$START_TIME

    declare -A max_concurrent
    declare -A ongoing_calls

    if [[ -z "$calls" ]]; then
        echo -e "${ORANGE}No calls found${NC} in the selected date range."
        return
    fi

    while IFS=$'\t' read -r calldate duration chan; do
        (( row++, processed++ ))
        CURRENT_TIME=$(date +%s)

if (( CURRENT_TIME - LAST_STATUS >= 1 )); then
    printf "\r%${COLUMNS}s" " "
    printf "\r${YELLOW}Still counting:${NC} Currently at row %d of %d..." \
           "$row" "$total_rows" >&2
    LAST_STATUS=$CURRENT_TIME
fi

        elapsed=$(( CURRENT_TIME - START_TIME ))
        est_remain=$(awk "BEGIN {printf \"%d\", ($elapsed/$processed)*($total_rows-$processed) + 0.5}")
        mins=$((est_remain/60)); secs=$((est_remain%60))
        est_human="${mins} minutes ${secs} seconds"

        max_left=$(( MAX_RUNTIME - elapsed ))
        [[ max_left -lt 0 ]] && max_left=0
        max_mins=$((max_left/60)); max_secs=$((max_left%60))
        max_human="${max_mins} minutes ${max_secs} seconds"

        if (( CURRENT_TIME - LAST_DEBUG >= 10 )); then
            debug "elapsed=$elapsed processed=$processed total_rows=$total_rows est_remain=$est_remain max_left=$max_left"
            LAST_DEBUG=$CURRENT_TIME
        fi

        if (( did_prompt == 0 )) && \
           (( elapsed + est_remain > MAX_RUNTIME )) && \
           (( CURRENT_TIME - LAST_WARNING >= 900 )) && \
           (( LAST_WARNING + 900 < START_TIME + MAX_RUNTIME )); then

            t0=$SECONDS
            echo
            echo
            read -u 3 -rp "$(printf '%b' "${RED}WARNING:${NC} There is a lot to count and the estimated time remaining is ${est_human}. Maximum runtime remaining is ${max_human}, which means the count is likely to abort before completion. Continue anyway? [y/N] ")" answer
            t1=$SECONDS
            START_TIME=$(( START_TIME + (t1 - t0) ))

            case "${answer,,}" in
                y|yes)
                    LAST_WARNING=$CURRENT_TIME
                    did_prompt=1
                    ;;
                *)
                echo
                    echo -e "${ORANGE}Aborting as per user request.${NC} ${LBLUE}Goodbye.\n${NC}"
                    exit 130
                    ;;
            esac
        fi

        if (( CURRENT_TIME - START_TIME > MAX_RUNTIME )); then
        echo
            echo -e "${RED}ERROR:${NC} Exceeded $MAX_RUNTIME seconds, aborting. ${LBLUE}Goodbye.\n${NC}"
            echo
            exit 2
        fi

        [[ -z "$calldate" || -z "$duration" || -z "$chan" ]] && continue

        start_ts=$(date -d "$calldate" +%s)
        end_ts=$((start_ts + duration))

        if [[ "$mode" == "extension" ]]; then
            name=$(echo "$chan" | sed -E 's|PJSIP/([0-9]+)-.*|\1|')
            [[ "$name" =~ ^[0-9]+$ ]] || continue
        else
            name=$(echo "$chan" | sed -E 's|PJSIP/([^ ]+)-[0-9a-f]+$|\1|')
            [[ "$name" =~ ^[0-9]+$ ]] && continue
        fi

        for (( ts=start_ts; ts<=end_ts; ts++ )); do
            ongoing_calls["$name,$ts"]=$(( ongoing_calls["$name,$ts"] + 1 ))
            (( ongoing_calls["$name,$ts"] > max_concurrent["$name"] )) && \
                max_concurrent["$name"]=${ongoing_calls["$name,$ts"]}
        done
    done <<< "$calls"

    if (( ${#max_concurrent[@]} == 0 )); then
        echo
        echo -e "${ORANGE}No calls found${NC} in the selected date range."
        return
    fi

    all_names=()
    if [[ "$mode" == "extension" ]]; then
        while IFS=$'\t' read -r _ _ chan; do
            ext=$(echo "$chan" | sed -E 's|PJSIP/([0-9]+)-.*|\1|')
            [[ "$ext" =~ ^[0-9]+$ ]] && all_names+=("$ext")
        done <<< "$calls"
        all_names=( $(printf "%s\n" "${all_names[@]}" | sort -u) )
    else
        while read -r entry; do
            all_names+=("$entry")
        done < <(get_trunks)
    fi
    echo
    echo
    echo -e "Maximum concurrent calls per PJSIP ${type_label} between $start_date and $end_date:"
echo
    global_max=0
    for val in "${max_concurrent[@]}"; do
        (( val > global_max )) && global_max=$val
    done

    for name in "${all_names[@]}"; do
        val="${max_concurrent["$name"]:-0}"
        if (( val == global_max && global_max > 0 )); then
            printf "${LBLUE} %-24s %s${NC}\n" "$name" "$val"
        else
            printf " %-24s %s\n" "$name" "$val"
        fi
    done

    echo

    echo -e "${RED}WARNING:${NC} If your SIP trunks are named using numeric values e.g. 24700020,"
    echo "the Concurrency Count results may be inaccurate because the script counts"
    echo "concurrent calls by extension number. Trunks named numerically will be"
    echo "counted as extensions, leading to unexpected concurrency figures."
    echo "For accurate results, trunk names should include alphabetic characters."
}

#12########################## MAIN EXECUTION ############################

if (( MODE_PRESET == 0 )); then
  attempts=0
  while (( attempts < 3 )); do
  echo
    read -rp $'Summarise concurrency by: [trunks/extensions/group] ' mode_input
    mode_input=${mode_input,,}
    case "$mode_input" in
      trunks|trunk|trun|tru|tr|t|trks|trk|trnks|trnk \
      |extensions|extension|extensio|extensi|extens|exten|exte|ext|exts|ex|e \
      |groups|group|grou|gro|gr|g|grps|grp)
        break
        ;;
      *)
        ((attempts++))
        echo
        echo -e "${RED}WARNING:${NC} Invalid mode entered (attempt $attempts of 3). Please enter trunks, extensions, or group."
        ;;
    esac
  done
  if (( attempts >= 3 )); then
    echo
    echo -e "${ORANGE}Too many invalid attempts.${NC} ${LBLUE}Goodbye.${NC}"
    echo
    exit 1
  fi
fi

if ! [[ "$mode_input" =~ ^(trunks|trunk|trun|tru|tr|t|trks|trk|trnks|trnk|extensions|extension|extensio|extensi|extens|exten|exte|ext|exts|ex|e|groups|group|grou|gro|gr|g|grps|grp)$ ]]; then
echo
echo -e "${RED}WARNING:${NC} Invalid mode entered (attempt $attempts of 3). Please enter trunks, extensions, or group."
    exit 1
fi

get_date_range

echo

case "$mode_input" in
    trunks|trunk|trun|tru|tr|t|trks|trk|trnks|trnk)
        calculate_concurrency "trunk"
        ;;
    extensions|extension|extensio|extensi|extens|exten|exte|ext|exts|ex|e)
        calculate_concurrency "extension"
        ;;
    groups|group|grou|gro|gr|g|grps|grp)
        calculate_group_concurrency
        ;;
    *)
    echo
echo -e "${RED}WARNING:${NC} Invalid mode entered (attempt $attempts of 3). Please enter trunks, extensions, or group."
        exit 1
        ;;
esac
echo
echo -e "${LBLUE}Goodbye.${NC}"
echo
exit 0
